</div>
</div>

<% /* TODO: clean up */ %>
<script>
var msgs = <%- JSON.stringify(msgs) %>;
var queued = <%- JSON.stringify(queued) %>;
<% if(locals.run) { %>
var SLUM = '<%= run.SLUM %>';
<% } %>
</script>

<script>
var DUs = {};
Array.prototype.forEach.call(document.querySelectorAll('[data-DU]'), function(el) {
  var SLUM = el.getAttribute('data-SLUM');
  DUs[SLUM] = {
    dom: el,
    val: el.getAttribute('data-DU')
  };
});

if(Object.keys(DUs).length) {
  var DUInterval = setInterval(function(){
    for(var DU in DUs){
      if(!queued[DU]) {
        DUs[DU].dom.innerText = ++DUs[DU].val;
      }
    }
    if(Object.keys(DUs).length === 0) {
      clearInterval(DUInterval);
    }
  }, 1000);
}

var ENDs = [];
Array.prototype.forEach.call(document.querySelectorAll('[data-END]'), function(el) {
  ENDs.push({
    dom: el,
    val: el.getAttribute('data-END')
  });
});

var now = parseInt(+new Date() / 1000, 10);

if(ENDs.length) {
  var EndInterval = setInterval(function(){
    ENDs.forEach(function(END){
      END.dom.innerText = moment.duration((END.val - now), 'seconds').humanize(true)
    })
  }, 60000);
}

var openCount = document.getElementById('open-count');
var socket = io('http://localhost:3000');
socket.on('open', function(msg){
  console.log(msg);
  if(msg.type === 'END') {
    openCount.innerText = msg.open;
    if(!DUs[msg.SLUM]) {
      return;
    }
    if (DUs[msg.SLUM].dom.classList) {
      DUs[msg.SLUM].dom.classList.add('run-done');
    } else {
      // IE9 compat
      DUs[msg.SLUM].dom.className += ' ' + 'run-done';
    }
    delete DUs[msg.SLUM];
    return;
  }
  if(msg.type === 'STA') {
    openCount.innerText = msg.open;
    delete queued[msg.SLUM];
    return;
  }
});


var killed;
var killswitch = document.getElementById('kill-switch');
var runCtrls = document.getElementById('run-ctrls');
if(runCtrls) {
  var autoscroll = true;
  var log = {};
  document.getElementById('auto-scroll').addEventListener('click', function(){
    autoscroll = !autoscroll;
  });
  Array.prototype.forEach.call(document.getElementsByClassName('test-tip'), function(el) {
    log[el.getAttribute('data-test')] = {
      dom: {
        tip: el
      },
      visible: false
    }
  });
  Array.prototype.forEach.call(document.getElementsByClassName('test-log-viewer'), function(el) {
    log[el.getAttribute('data-test')].dom.viewer = el;
  });
  Array.prototype.forEach.call(document.getElementsByClassName('test-log-full'), function(el) {
    log[el.getAttribute('data-test')].dom.full = el;
  });
  Array.prototype.forEach.call(document.getElementsByClassName('test-log-mini'), function(el) {
    var test = el.getAttribute('data-test');
    log[test].dom.mini = el;
    el.addEventListener('click', function(){
      for(var i in log) {
        log[i].visible = false;
        log[i].dom.viewer.style.display = 'none';
      }
      log[test].dom.viewer.style.display = 'block';
      log[i].visible = true;
      window.scroll(0,0);
    });
  });

  if(killswitch) {
    killswitch.addEventListener('click', function(){
      killed = true;
      socket.emit('kill', SLUM);
      killswitch.style.display = 'none';
      document.getElementById('kill-switch-done').style.display = 'block';
    });
  }

  function playMsg(msg){
    console.log(msg);
    if(msg.type === 'ln') {
      ['mini', 'full'].forEach(function(size){
        var li=document.createElement('li');
        li.innerHTML=li.innerHTML + msg.val;
        log[msg.test].dom[size].appendChild(li);
      });
      if(autoscroll && log[msg.test].visible) {
        log[msg.test].dom.tip.scrollIntoView();
      }
      return;
    }
    if(msg.type === 'END') {
      if(!killed && killswitch) {
        killswitch.style.display = 'none';
      }
    }
  }

  if(msgs) {
    msgs.forEach(function(msg){
      playMsg(msg);
    });
  }

  socket.on('error', function(err){
    console.log(err);
  });
  if(SLUM) {
    socket.emit('join', SLUM);
  }
  socket.on('run', playMsg);
}
</script>

</body>
</html>
